name: Rust

on:
  push:
    tags: [ "*" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos, x86_64-windows]
        include:
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
          jreleaser_platform: osx-x86_64
        - build: aarch64-macos
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
          cross: false
          skip_tests: true
          jreleaser_platform: osx-aarch_64
        - build: x86_64-linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
          jreleaser_platform: linux-x86_64
        - build: aarch64-linux
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true
          jreleaser_platform: linux-aarch_64
        - build: x86_64-windows
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
          cross: false
          jreleaser_platform: windows-x86_64

    steps:
    - uses: actions/checkout@v4

    - name: Set VERSION env
      run: |
        echo "VERSION=${GITHUB_REF_NAME#v}" >> "$GITHUB_ENV"

    - name: Update version in Cargo.toml
      if: matrix.build == 'x86_64-linux'
      run: |
        cargo install cargo-edit
        cargo-set-version set-version ${{ env.VERSION }}

    - name: Publish
      if: matrix.build == 'x86_64-linux'
      run: |
        cargo login ${{ secrets.CRATES_IO_API_TOKEN }}
        cargo publish --target x86_64-unknown-linux-gnu --allow-dirty

    - name: Install ${{ matrix.rust }} toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Install Cross
      if: "matrix.cross"
      run: |
        cargo install cross --git https://github.com/cross-rs/cross.git --rev 47df5c76e7cba682823a0b6aa6d95c17b31ba63a

    - name: Install AArch64 target toolchain
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build release binary
      run: |
        cargo build --release --locked --target ${{ matrix.target }}

    - name: jReleaser assemble
      uses: jreleaser/release-action@v2
      with:
        arguments: assemble
      env:
        JRELEASER_PROJECT_VERSION: ${{ env.VERSION }}
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        JRELEASER_PLATFORM_OVERRIDE: ${{ matrix.jreleaser_platform }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: |
          out/jreleaser/assemble/tetris-tui/archive/*.zip

  release:
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          arguments: full-release -PartifactsDir=artifacts -PskipArchiveResolver
        env:
          JRELEASER_PROJECT_VERSION: ${{ env.VERSION }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          JRELEASER_CHOCOLATEY_API_KEY: ${{ secrets.CHOCO_API_KEY }}

      - name: Upload JReleaser output
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties